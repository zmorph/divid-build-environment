pipeline {
    agent {label 'workerlinux'}

    environment{
        installer_files = fileExists './installer'
        build_files = fileExists './build'
    }

    stages {
        
        stage ('Clean installer files') {            

            when { expression { installer_files == 'true' } }
            steps {
                sh 'sudo rm -r ./installer'
            }
        }  

        stage ('Clean build files') {            

            when { expression { installer_files == 'true' } }
            steps {
                sh 'sudo rm -r ./build'
            }
        }

        stage ('Run build') {
            steps {
                sh 'sudo bash ./linux_build.sh'
            }
        }

        stage ('Signing') {
            steps {
                withCredentials([file(credentialsId: 'private_gpg', variable: 'GPG_PRIVATE_KEY')]) {
    
                    sh 'sudo gpg --batch --import $GPG_PRIVATE_KEY'
                    sh 'sudo gpg --detach-sig --armor ./installer/installer/dist/Zmorph-Divid-*.AppImage'
                    sh 'sudo gpg --export -a --output ./installer/installer/dist/public_key.asc'
                    sh 'sudo ./signing/sha1sum_gen.sh'
                }
            }
        }

    }
    
    post {
        always {
            archiveArtifacts artifacts: 'installer/installer/dist/Zmorph-Divid-*.AppImage', fingerprint: true
            archiveArtifacts artifacts: 'installer/installer/dist/Zmorph-Divid-*.sha1', fingerprint: true
            archiveArtifacts artifacts: 'installer/installer/dist/Zmorph-Divid-*.asc', fingerprint: true
        }
    }

}