pipeline {
    agent {label 'WSERWER50'}

    environment{
        old_files_installation = fileExists './output'
        old_files_build = fileExists './build'
        old_files_installers = fileExists './windows-installers'
    }

    stages {

        stage ('Clean environment files old_files_installation') {            

            when { expression { old_files_installation == 'true' } }
            steps {
                bat 'powershell "rm -r -fo ./output"'
            }
        }

        stage ('Clean environment files old_files_build') {            

            when { expression { old_files_build == 'true' } }
            steps {
                bat 'powershell "rm -r -fo ./build"'
            }
        }
        
        stage ('Clean environment files old_files_installers') {            

            when { expression { old_files_installers == 'true' } }
            steps {
                bat 'powershell "rm -r -fo ./windows-installers"'
            }
        }

        stage ('Run build') {
            steps {
                withCredentials([file(credentialsId: 'certificate_windows', variable: 'CERTIFICATE_WINDOWS')]) {

                    bat """
                        powershell "Copy-Item %CERTIFICATE_WINDOWS% -Destination ./docker/certificate.pfx"
                        mkdir output
                        mkdir build
                        mkdir windows-installers
                    """
                    dir('build') {
                        bat """
                        set path=%path:"=%
                        CALL "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Auxiliary/Build/vcvarsx86_amd64.bat"
                        chcp 65001
                        cmake -G "NMake Makefiles" -DCMAKE_PREFIX_PATH="../output" -DCMAKE_INSTALL_PREFIX="../output" -DCMAKE_BUILD_TYPE=Release ..
                        cmake --build .
                    """
          }

                    bat """
                    powershell "Remove-Item ./docker/certificate.pfx"       
                    powershell "Copy-Item %CERTIFICATE_WINDOWS% -Destination ./certificate.pfx"  
                    powershell mv output/installer/dist/Zmorph-Divid-* windows-installers/
                    """
                }
            }
        }

        stage ('Signing') {
            steps {
                withCredentials([file(credentialsId: 'certificate_windows', variable: 'CERTIFICATE_WINDOWS')]) {
                    bat """
                        
                        powershell "signtool sign  /fd SHA256 /a /f %CERTIFICATE_WINDOWS% ./windows-installers/Zmorph-Divid-*"
                        powershell "./signing/windows_installer_exe_signing.ps1"
                    """
                }
            }
        }

    }
    
    post {
        always {
            archiveArtifacts artifacts: 'windows-installers/', fingerprint: true
        }
    }

}